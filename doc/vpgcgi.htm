<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="description"
content="This page describes the VPG instructions to generate HTML pages through CGI requests.These instructions give VPG the power to receive requests frombrowsers, generate queries from databases or sql servers and submitthe results in HTML format.">
<meta name="keywords"
content="cgi programming,html programming,linux cgi html programming,cgi sql connection,cgi database connection,database to html,instant html pages">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>CGI and HTML generated by VPG.</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>

<h1>The VPG-CGI Connection</h1>

<p align="right"><a href="http://ivsol.com/index.htm">VPG Home
Page</a> <br>
<a href="http://ivsol.com/vpgrefer.htm">The Complete VPG
Reference On-Line Manual</a> <br>
<a href="http://ivsol.com/vpman/index.htm">More VPG tutorial
material</a> </p>

<h2>CGI programming can be tedious and difficult<br>
VPG makes it simple, easy and straightforward</h2>

<p>In order for VPG to be a full Client/Server language, it needs
to be dressed up with instructions that will make it capable of <i>responding</i>
to web servers, as well as of <i>talking</i> to any web browser. </p>

<form
action="mailto:infomail@ivsol.com?Subject=Useful+sql_web_integration"
method="POST">
    <p align="center"><input type="submit" name="vpgcgi"
    value="Keep me up to date on VPG"></p>
</form>

<p>The VPG syntax is already simple enough. It would have been
quite easily for any programmer that knows HTML to be able to
write HTML pages from VPG programs. However, we have made it even
easier for the VPG programmer to write programs ready to respond
to HTTPD requests by generating HTML pages on the fly, from data
that might be stored either in VPG indexed flat database files or
from any SQL server that VPG can talk to. </p>

<p>The first thing that you need is a VPG instruction capable of <i>reading</i>
everything that comes with its call from the HTTPD server. This
is it: </p>

<h2>Hi,lVar,;</h2>

<p>All VPG HTML instructions start with letter 'H'. In this case,
this instruction should remind you of something like &quot;input&quot;.
Thus the lower case letter &quot;i&quot;. And then we need a
variable of type <b>long</b> to receive the number of <i>fields</i>
that the user sent. When a VPG-CGI program runs it does so in
response to a call made by the HTTPD server. Thus, the first
instruction we need is the one capable of reading whatever the
user at the other side of the connection sent. </p>

<p>If variable <b>iVar</b> reports a value of zero, then we have
not received any fields or data from the user. If we did receive
at least <i>one</i> field, then we need to respond accordingly. </p>

<p>While you read this, your should also keep at your sight the
sample program written with the sole and only purpose of
demonstrating what you can do with the VPG HTML instructions. </p>

<p>Of course, if your VPG program determines that it will need to
send data in HTML format, the first very <i>natural</i> VPG
instruction that it should generate is the following: </p>

<p><font color="#0000FF" size="2" face="Courier New">\Content-type:
text/html\; l; l;</font> </p>

<p>Notice the two very natural VPG <i>line feed</i> instructions <b>l;
l;</b>. If you are familiar with the CGI game, then you know that
the CGI program must generate information to the server
concerning the type of content that will be sent to it. The two
linefeeds are <i>mandatory</i> for the CGI program to close its
communication about the kind of content that it will be
generating. </p>

<dir>
    <li><dir>
            <li><i>It is important to keep in mind that while you
                are talking to an HTTPD server, you must do all
                your output to Standard Output, which in VPG is
                automatic when it starts executing and goes back
                to it when your program contains </i><b><i>Ff1;</i></b><i>.</i></li>
        </dir>
    </li>
</dir>

<p>The formatting of your output will be the job of the user's
browser. Your responsibility is to send the right (coherent)
instructions for a neat layout. </p>

<p align="center"><a
href="https://www.security-one.com:2000/home/ivsol/"><strong>OK-
I got the idea. I want to have VPG.</strong></a></p>

<h2>Printing the fields</h2>

<p>Once you know how many fields you did receive, you are ready
to start playing with them. The following is a piece of VPG code
that will display all the fields received from the <i>FORM</i>
filled by the user: </p>

<p><font color="#0000FF" size="2" face="Courier New">(iCount)=(0);</font>
<br>
<font color="#0000FF" size="2" face="Courier New">{</font> <br>
<font color="#0000FF" size="2" face="Courier New">Hfi; Hp,0,iCount,;
HfI; \: \; Hfb; Hp,1,iCount,; HfB; Hfr;</font> <br>
<font color="#0000FF" size="2" face="Courier New">(iTit)=(iTit)(1)+;
!(iTit)0(iSize)&gt;+;</font> <br>
<font color="#0000FF" size="2" face="Courier New">)</font> </p>

<p>The logic of the above code is quite simple. Variable &quot;iCount&quot;
(it must be a short integer), is initialized with value 0. Then
we enter the loop and we notice the <i>text format instructions (</i><b><i>Hf..
see below</i></b>). And then we notice... </p>

<h2>Hp,0-1,iVar,;</h2>

<p>This is a practical instruction for printing the fields
received from the HTTPD server (that contain whatever the user
typed on his browser form). The &quot;p&quot; stands for &quot;print&quot;
(obvious?), and then we can either place a digit 0 (zero) or a
digit 1 (one). If we place a digit 0, the <i>title</i> of field
number <i>iVar</i> will be printed (shown, displayed). If we
place a digit 1, then the <i>contents</i> of field number <i>iVar</i>
will be printed. All fields are sent as null terminated strings. </p>

<h2>Formatting the text</h2>

<p>We had said that all VPG HTML instructions start with &quot;H&quot;.
The next thing to learn about the VPG HTML instructions is that
all the <i>format</i> instructions take an &quot;f&quot; after
the &quot;H&quot;. The third letter determines what kind of
formatting element we are referring to. </p>

<p><font face="Courier New"><b>Hfi; Starts </b><b><i>italics.</i></b></font>
<br>
<font face="Courier New"><b>HfI; ENDS italics.</b></font> <br>
<font face="Courier New"><b>Hfb; Starts bold or darker face.</b></font>
<br>
<font face="Courier New"><b>HfB; ENDS bold.</b></font> <br>
<font face="Courier New"><b>Hfu; Starts </b><b><u>underline</u></b><b>.</b></font>
<br>
<font face="Courier New"><b>HfU; ENDS underline</b></font> <br>
<font face="Courier New"><b>Hfp; Starts a new paragraph &lt;p&gt;</b></font>
<br>
<font face="Courier New"><b>Hfr; Inserts a break &lt;br&gt;</b></font>
<br>
<font face="Courier New"><b>Hfh; Draws a HORIZONTAL line &lt;hr&gt;</b></font>
<br>
<font face="Courier New"><b>Hfe; Starts preformatted text</b></font>
<br>
<font face="Courier New"><b>HfE; Ends preformatted text</b></font>
<br>
<font face="Courier New"><b>Hf1; Starts heading size 1</b></font>
<br>
<font face="Courier New"><b>Hf6; Ends heading size 1 (digit 1 + 5
for all headings)</b></font> <br>
<font face="Courier New"><b>Hf2; Starts heading size 2</b></font>
<br>
<font face="Courier New"><b>Hf3; Starts heading size 3</b></font>
</p>

<p>As usual in this art of programming, the best way to get an
exact feeling of what you can do with a programming instruction
is to <i>use it!</i> Of course, you knew this, didn't you? </p>

<h2>HF1,&quot;action&quot;,&quot;method&quot;,;</h2>

<p>This instruction <i>begins</i> a form. Instead of &quot;action&quot;
you will be writing here (constant or variable) the CGI script
that should be called when the <b><i>submit</i></b> button of the
form is clicked. This &quot;action&quot; field is usually
substituted by a CGI script like this: &quot;/cgi-bin/vp1.cgi&quot;,
where file &quot;vp1.cgi&quot; might be a text file containing
this line </p>

<p><font size="2" face="Courier New">#!/usr/bin/vpg4 /www/vps/htvpg.vp</font>
</p>

<p>Which means that the HTTPD should execute &quot;/usr/bin/vpg4&quot;
with argument &quot;/www/vps/htvpg.vp&quot;. And of course,
&quot;htvpg.vp&quot; is a VPG <i>pseudocode</i> generated by the <i>vp
or vps </i>compiler. </p>

<p>The &quot;method&quot; part of the instruction will probably <i>always</i>
contain the word &quot;POST&quot;. </p>

<h2>HF0;</h2>

<p>This instruction marks the <i>end of a form</i>. Both
instructions MUST exist if the HTML page is to make sense. Inside
the <i>open</i> and <i>close</i> form instructions, your program
will usually contain one or more input, text and select
instructions. These are fields that make it easier for the user
to enter the data to be sent to the HTTPD server. </p>

<p>All forms should start with <b>HF1...; </b>and end with <b>HF0;</b>.
The following sample code shows the structure in which your texts
should be organized in order to generate forms. Remember: a form
can NEVER have another form inside. </p>

<pre><font color="#3333FF">HF1,&quot;/cgi-bin/vp1.cgi&quot;,&quot;POST&quot;,;</font></pre>

<pre><font color="#3333FF">&nbsp;&nbsp; ... * all other VPG instructions *</font></pre>

<pre><font color="#3333FF">HF0; * end of form *</font></pre>

<h2>HI?,...;</h2>

<p>All VPG instructions that start with &quot;HI...&quot; are
used to generate <i>input</i> objects. The following are those
included for the VPG programmer to generate: <br>
&nbsp; </p>

<table border="1" width="100%">
    <tr>
        <td><h4><tt>HIt,,35,0,&quot;name&quot;,;</tt></h4>
        </td>
        <td>'t' stands for '<b>text'</b>. The browser should
        create a text edit box. '35' can be any value (constant
        or variable) and refers to the size in characters of the
        edit box. '0' can be either '0' or '1'. If it is '0', the
        edit box will accept up to 1024 characters. If it is '1',
        the edit box will only accept '35', (or whatever the
        number value indicated in the 2nd. argument may have been).</td>
    </tr>
    <tr>
        <td><b><tt>HIp,10,0,&quot;name&quot;,;</tt></b></td>
        <td>The behavior is identical to HIt except that the
        characters typed by the user <i>won't be visible</i>.
        Useful for <b>password</b> fields.</td>
    </tr>
    <tr>
        <td><b><tt>HIr,&quot;name&quot;, &quot;option1&quot;,
        &quot;option2&quot;, &quot;option3&quot;, ... ,;</tt></b></td>
        <td>'r' stands for '<b>radio</b>'. The browser should
        create a RADIO BUTTON per option placed. Only ONE option
        will be accepted. That is, the user can select only ONE
        option. You can place as many options as you wish per
        &quot;name&quot;. It does not make any sense to repeate
        &quot;name&quot; with another radio button statement.</td>
    </tr>
    <tr>
        <td><b><tt>HIc,&quot;name&quot;, &quot;activ1&quot;,
        &quot;activ2&quot;, &quot;activ3&quot;, ... ,;</tt></b></td>
        <td>'c' stands for <b>checkbox</b>. The browser should
        create a number of check boxes, one per option placed
        after &quot;name&quot;. The user will be allowed to mark
        more than one. All the options will be sent to the
        program under &quot;name&quot; .</td>
    </tr>
    <tr>
        <td><b><tt>HIb,&quot;Send&quot;,;</tt></b><tt>&nbsp;</tt>&nbsp;
        <br>
        <b><tt>HIb,&quot;Find&quot;,;</tt></b><tt>&nbsp;</tt>&nbsp;
        <br>
        <b><tt>HIb,&quot;AnyAction&quot;,;</tt></b></td>
        <td>'b' stands for <b>button</b>. The browser should
        create a button that, when clicked, will cause the data
        from the form to be sent to the CGI program. The
        interesting thing here is that the <b>name</b> of the
        button will be what the program will receive different,
        depending on the user's intentions. <i>(delete as a
        button name simply does not work and I don't know the
        reason why this is so).</i></td>
    </tr>
    <tr>
        <td><b><tt>HIB,&quot;Cancel&quot;,;</tt></b></td>
        <td>'B' stands for <b>'Button'</b>, too. However, we use
        the upper case 'B' to name CANCEL buttons. The form will
        be cleared from anything the user may have typed when
        this button is clicked.</td>
    </tr>
</table>

<h2>Single or multiple selection from a list of options.<br>
The Hsb instruction.</h2>

<p>'Hsb' must take 4 or more arguments. The 's' stands for <b>select</b>,
and the 'b' for <b>begin</b>. Any 'Hsb' instruction <i>must</i>
have a corresponding <b>HsB; </b>closing select statement. </p>

<p>The complete syntas is as follows: </p>

<p><b>Hsb,0-1,&quot;name&quot;,0,&quot;Option1&quot;,&quot;Option2&quot;,
... ,;</b> </p>

<p>The first '0' or '1' indicates whether the selection will be
SINGLE ('0') or MULTIPLE ('1'). </p>

<p>Then comes the &quot;name&quot; of the option. Of course, this
is the identity with which the data will be received by the CGI
program. </p>

<p>Then comes again a '0' or a '1'. If this is a '0', then the
phrases or words placed afterwards (any number of them) will be
considered the actual options. However, if this is a '1', then
the next string (constant or variable) will be considered a FILE
from which the options will be read to present to the user, like
this: </p>

<p><b>Hsb,0,&quot;Customer&quot;,1,&quot;list.txt&quot;,;</b> </p>

<p>'list.txt' might be a file previously generated by VPG as a
result of those keys belonging to a specif record set resulting
from a previous query. The forma of this file must be one option
per line. </p>

<p>The following is a VPG sample code to generate output that
creates a form: </p>

<pre><font color="#3333FF">HF1,&quot;/cgi-bin/vp2.cgi&quot;,&quot;POST&quot;,; * form begins * l;

Hfe;
\Name:&nbsp;&nbsp;&nbsp;&nbsp; \;&nbsp; HIt,35,0,&quot;name&quot;,; l;
\Password: \;&nbsp; HIp,10,0,&quot;pass1&quot;,; l;
\Key:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \;&nbsp; HIt,10,1,&quot;key&quot;,; \(10 characters maximum accepted)\; l;
\Radio:&nbsp;&nbsp;&nbsp; \;&nbsp; HIr,&quot;NomOpcio&quot;,&quot;Option1&quot;,&quot;Option2&quot;,&quot;Option3&quot;,; l;
\Checkbox: \;&nbsp; HIc,&quot;Sports&quot;,&quot;tennis&quot;,&quot;golf&quot;,&quot;soccer&quot;,; l;
\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \;&nbsp; HIc,&quot;Sports&quot;,&quot;swimming&quot;,&quot;athletism&quot;,&quot;bowling&quot;,&quot;baseball&quot;,; l;
\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \;&nbsp; HIc,&quot;Sports&quot;,&quot;table_tennis&quot;,&quot;volley_ball&quot;,&quot;biking&quot;,; l;
\Choices:&nbsp; \;&nbsp; Hsb,0,&quot;Ocupation&quot;,0,&quot;&nbsp;&nbsp; &quot;,&quot;Engineer&quot;,&quot;Lawyer&quot;,&quot;Architect&quot;,&quot;Priest&quot;,&quot;Merchant&quot;,&quot;Singer&quot;,&quot;Housewife&quot;,&quot;Pilot&quot;,&quot;Politician&quot;,&quot;Schoolteacher&quot;,&quot;Scientist&quot;,&quot;Programmer&quot;,; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HsB; l;
</font><font color="#CC0000">\Comments: \;&nbsp; HTb,&quot;Obser&quot;,15,70,0,; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x/bin/cat /home/franz/vpgcur/htpru.p~;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HTB; l;
</font><font color="#3333FF">\Buttons:&nbsp; \;&nbsp; HIb,&quot;Send&quot;,; HIb,&quot;Find&quot;,; HIb,&quot;Eliminar&quot;,; l;
\Cancel:&nbsp;&nbsp; \;&nbsp; HIB,&quot;Cancel&quot;,; l; Hfr;
HfE;
HF0; l; l; * end of form *</font></pre>

<p>It is <i>very important</i> to place the VPG <b><u>'l;'</u></b>
(end of line) instructions, or else the output to the HTTPD
server won't be complete. Notice that in this example, we are
using <i>preformatted</i> parragraphs (<b>Hfe;/HfE;</b>). </p>

<h2>Accepting multiple lines of text at the form.<br>
Instructions HTb...; / HTB;</h2>

<p>Sometimes you need your program to accept any number of lines
of text from the user filling the form, especially for the
comments and/or observations fields. In the code sample above,
the lines in red refer to the generation of a <i>multiple line
text box</i> that will even be presented FILLED WITH A PROGRAM to
the user. Line <b><u>x/bin/cat /home/franz/vpgcur/htpru.p~;</u></b>&nbsp;
will generate a listing that will be presented to the user <i>inside</i>
the multiline text box. </p>

<p>Let's observe the syntax of Htb, which takes exactly <b>4
arguments</b>: </p>

<p><b>HTb,&quot;name&quot;,rows,columns,0-1,;</b> </p>

<p>The &quot;name&quot; can be any word that refers to the ID of
the text lines that the user will send through the form. </p>

<p>Then come the <i>rows and columns</i> numeric arguments, which,
of course, can be expressed with constants or with variables of
type integer. These values only refer to the <b>size</b> of the
box that should be generated by the browser. </p>

<p>However, the last argument (a '0' or a '1') indicates what the
behavior of the edit box should be when the words typed reach the
right margin of the edit box. If the argument is a '1', then the <i>words
will wrap</i> and typing will automatically continue on the next
line. If this argument is '0', then the words will continue past
the right margin. </p>

<p>In our sample code above we have given it a '0', since we are
presenting inside the box the code of a VPG program, which should
never be arbitrarily wrapped, like any other programming language
code. </p>

<h2>A sample web-SQL Server VPG program</h2>

<p>The following VPG program code reveals the simplicity with
which it is possible to create a VPG-CGI application that
receives a query from a user, connects to the SQL Server, demands
the query and then submits the page to the user. Take a look at
this <i>simple</i>, yet <b>powerful and useful and flexible</b>
program code: </p>

<pre>* A VPG program that sends the results of a query to the user *

M iSize l,lTot l,sNull s10,sbuf4 s1024,sbuf5 s2048,
&nbsp;&nbsp; tam0 s0,; mtam0&amp;;

\Content-type: text/html\; l; l;

Hi,iSize,;
HC,sbuf4,#,&quot;comments&quot;,;
fd0; O@,&quot;tcp sollin 1313&quot;,&quot;USER&quot;,&quot;SQLPASSW&quot;,1,Err1,;

f1; k0; ot,&quot;cards&quot;,;
z0,sbuf5,#;
k1;</pre>

<pre>&nbsp; q+,sbuf5,
&nbsp;&nbsp;&nbsp;&nbsp; &quot;select name,address,zone,phone,limit from card where &quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sbuf4,
&nbsp;&nbsp;&nbsp;&nbsp; &quot; order by name&quot;,;
&nbsp;qx,sbuf5,;
&nbsp;M nam s36,addr s36,zon s21,pho s21,lim d,;
&nbsp;
&nbsp;f1; k1; P;
&nbsp;(lTot)=(0);
\&lt;TABLE&gt;\; l;
{
&nbsp;&nbsp; a; n+;
&nbsp;&nbsp; \&lt;TR&gt;\; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \&lt;TD&gt;\; pnam,0; \&lt;/TD&gt;\; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \&lt;TD&gt;\; paddr,0; \&lt;/TD&gt;\; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \&lt;TD&gt;\; pzon,0; \&lt;/TD&gt;\; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \&lt;TD&gt;\; ppho,0; \&lt;/TD&gt;\; l;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \&lt;TD&gt;\; plim,%,10.2f~; \&lt;/TD&gt;\; l;
&nbsp;&nbsp; \&lt;/TR&gt;\; l;
&nbsp;&nbsp; (lTot)=(lTot)(1)+;
)
\&lt;/TABLE&gt;\; l;

Hfb; \&lt;p&gt;Total: \; plTot,%,8.2ld~; \ records\; HfB; l;

gEND;

[Err1;

\&lt;p&gt;Error: no connection to the SQL Server.\;l;
gEND;


[END;
};</pre>

<p align="left">The above is code that combines simple HTML
instructions with VPG. This code does not test the query. It
simply passes the query on to the SQL server. If you need more
info about the instructions shown here, you can go to</p>

<p align="right"><a href="http://ivsol.com/vpman/index.htm">VPG
tutorial material</a>. <br>
&nbsp; <a href="http://ivsol.com/index.htm">VPG Home Page</a> <br>
<a href="http://ivsol.com/vpgrefer.htm">The Complete VPG
Reference On-Line Manual</a> &nbsp; </p>

<p align="center"><a
href="https://www.security-one.com:2000/home/ivsol/"><strong>OK-
I got the idea. I want to have VPG.</strong></a></p>
</body>
</html>
